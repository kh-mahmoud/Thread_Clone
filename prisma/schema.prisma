// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @unique
  username     String      @unique
  name         String
  image        String
  bio          String?
  onboarded    Boolean     @default(false)
  Thread       Thread[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Community    Community[]
  communities  Community[] @relation("members", fields: [communityIDs], references: [id])
  communityIDs String[]    @db.ObjectId
  liked        Thread[]    @relation("likedBy", fields: [userliked], references: [id])
  userliked    String[]    @db.ObjectId
  // followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  // followedByIDs String[] @db.ObjectId
  // following     User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  // followingIDs  String[] @db.ObjectId
}

model Thread {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Thread?    @relation("ChildToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    String?    @db.ObjectId
  children    Thread[]   @relation("ChildToParent") 
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?    @db.ObjectId
  likes       User[]     @relation("likedBy", fields: [userlike], references: [id])
  userlike    String[]   @db.ObjectId
}

model Community {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  username   String    @unique
  name       String
  image      String
  bio        String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  createdBy  User      @relation(fields: [creatorId], references: [id])
  creatorId  String    @db.ObjectId
  threads    Thread[]
  members    User[]    @relation("members", fields: [membersIDs], references: [id])
  membersIDs String[]  @db.ObjectId
}
